#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2020 Pier Luigi Fiorini <pierluigi.fiorini@liri.io>
#
# SPDX-License-Identifier: MIT

import glob
import os
import json
import subprocess
import shlex
import sys

# JSON contains an array of dictionaries with the following keys:
# - type: contains `ts` or `desktop`
# - directory: sources directory, only for `ts`
# - source_file: template file, only for `desktop`
# - file_filter: filter of the source files, only for `desktop`
# - output_path: output file location


def run(cmd, **kwargs):
    out = []
    for c in cmd:
        out.append(shlex.quote(c))
    print('+ ' + repr(' '.join(out))[1:-1])
    return subprocess.run(cmd, **kwargs)


def main():
    github_workspace = os.environ['GITHUB_WORKSPACE']
    sources_path = os.environ.get('INPUT_SOURCES_PATH') or os.path.join(github_workspace, '.tx', 'sources.json')

    os.chdir(github_workspace)

    with open(sources_path, 'r') as f:
        sources = json.load(f)
        for entry in sources:
            process_entry(entry)


def process_entry(entry):
    for key in ('type', 'output_path'):
        if key not in entry:
            print('Entry doesn\'t have "%s": skipping' % key, file=sys.stderr)
            return
    if entry['type'] == 'ts':
        if 'directory' not in entry:
            print('Entry doesn\'t have "directory": skipping', file=sys.stderr)
            return
    elif entry['type'] == 'desktop':
        for key in ('source_file', 'file_filter'):
            if key not in entry:
                print('Entry doesn\'t have "%s": skipping' % key, file=sys.stderr)
                return
    elif entry['type'] == 'metainfo':
        if 'source_file' not in entry:
            print('Entry doesn\'t have "source_file": skipping', file=sys.stderr)
            return
    else:
        print('Entry has an unkown type (%s): skipping' % entry['type'], file=sys.stderr)
        return

    if entry['type'] == 'ts':
        directory = entry['directory']
        output_path = entry['output_path']
        run(['lupdate-qt5', directory, '-ts', '-no-obsolete', output_path], check=True)
    elif entry['type'] == 'desktop':
        source_file = entry['source_file']
        dest_file = entry['output_path']
        file_filter = entry['file_filter'].replace('<lang>', '*')
        globs = glob.glob(file_filter)
        args = ['/usr/bin/translate-desktop', '--source=' + source_file, '--dest=' + dest_file]
        run(args + globs, check=True)
        run(['git', 'add', dest_file], check=True)
    elif entry['type'] == 'metainfo':
        source_file = entry['source_file']
        output_path = entry['output_path']
        run(['itstool', '-i', '/usr/share/lupdate-action/as-metainfo.its', '-o', output_path, source_file], check=True)


if __name__ == '__main__':
    main()
